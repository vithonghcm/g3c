'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNot = exports.isProvider = exports.iff = exports.softDelete = undefined;

var _utils = require('./utils');

/* eslint-env es6, node */
/* eslint no-param-reassign: 0, no-var: 0 */

var errors = require('feathers-errors').errors;

/**
 * Mark an item as deleted rather than removing it from the database.
 *
 * @param {string} field - Field for delete status. Supports dot notation. Default is 'deleted'.
 *
 * export.before = {
 *   all: softDelete()
 * };
 */
var softDelete = exports.softDelete = function softDelete(field) {
  var deleteField = field || 'deleted';

  return function (hook) {
    var service = this;
    hook.data = hook.data || {};
    hook.params.query = hook.params.query || {};
    (0, _utils.checkContext)(hook, 'before', null, 'softDelete');

    if (hook.params.query.$disableSoftDelete) {
      delete hook.params.query.$disableSoftDelete;
      return hook;
    }

    switch (hook.method) {
      case 'find':
        hook.params.query[deleteField] = { $ne: true };
        return hook;
      case 'get':
        return throwIfItemDeleted(hook.id).then(function () {
          return hook;
        });
      case 'create':
        return hook;
      case 'update': // fall through
      case 'patch':
        if (hook.id) {
          return throwIfItemDeleted(hook.id).then(function () {
            return hook;
          });
        }
        hook.params.query[deleteField] = { $ne: true };
        return hook;
      case 'remove':
        return Promise.resolve().then(function () {
          return hook.id ? throwIfItemDeleted(hook.id) : null;
        }).then(function () {
          hook.data[deleteField] = true;
          hook.params.query[deleteField] = { $ne: true };
          hook.params.query.$disableSoftDelete = true;

          return service.patch(hook.id, hook.data, hook.params).then(function (result) {
            hook.result = result;
            return hook;
          });
        });
    }

    function throwIfItemDeleted(id) {
      return service.get(id, { query: { $disableSoftDelete: true } }).then(function (data) {
        if (data[deleteField]) {
          throw new errors.NotFound('Item has been soft deleted.');
        }
      }).catch(function () {
        throw new errors.NotFound('Item not found.');
      });
    }
  };
};

/**
 * Hook to conditionally execute another hook.
 *
 * @param {Function|Promise|boolean} ifFcn - Predicate function(hook).
 *    Execute hookFcn if result is truesy.
 * @param {Function|Promise} hookFcn - Hook function to execute.
 * @returns {Object} hook
 *
 * The predicate is called with hook as a param.
 *   const isServer = hook => !hook.params.provider;
 *   iff(isServer, hook.remove( ... ));
 * You can use a high order predicate to access other values.
 *   const isProvider = provider => hook => hook.params.provider === provider;
 *   iff(isProvider('socketio'), hook.remove( ... ));
 *
 * feathers-hooks will catch any errors from the predicate or hook Promises.
 */
var iff = exports.iff = function iff(ifFcn, hookFcn) {
  return function (hook) {
    var check = typeof ifFcn === 'function' ? ifFcn(hook) : !!ifFcn;

    if (!check) {
      return hook;
    }

    if (typeof check.then !== 'function') {
      return hookFcn(hook); // could be sync or async
    }

    return check.then(function (check1) {
      if (!check1) {
        return hook;
      }

      return hookFcn(hook); // could be sync or async
    });
  };
};

/**
 * Predicate to check what called the service method.
 *
 * @param {string} [providers] - Providers permitted
 *    'server' = service method called from server,
 *    'external' = any external access,
 *    string = that provider e.g. 'rest',
 * @returns {boolean} whether the service method was called by one of the [providers].
 */
var isProvider = exports.isProvider = function isProvider() {
  for (var _len = arguments.length, providers = Array(_len), _key = 0; _key < _len; _key++) {
    providers[_key] = arguments[_key];
  }

  if (!providers.length) {
    throw new errors.MethodNotAllowed('Calling iff() predicate incorrectly. (isProvider)');
  }

  return function (hook) {
    // allow bind
    var hookProvider = (hook.params || {}).provider;

    return providers.some(function (provider) {
      return provider === hookProvider || provider === 'server' && !hookProvider || provider === 'external' && hookProvider;
    });
  };
};

/**
 * Negate a predicate.
 *
 * @param {Function} predicate - returns a boolean or a promise resolving to a boolean.
 * @returns {boolean} the not of the predicate result.
 *
 * const hooks, { iff, isNot, isProvider } from 'feathers-hooks-common';
 * iff(isNot(isProvider('rest')), hooks.remove( ... ));
 */
var isNot = exports.isNot = function isNot(predicate) {
  if (typeof predicate !== 'function') {
    throw new errors.MethodNotAllowed('Expected function as param. (isNot)');
  }

  return function (hook) {
    var result = predicate(hook); // Should we pass a clone? (safety vs performance)

    if (!result || typeof result.then !== 'function') {
      return !result;
    }

    return result.then(function (result1) {
      return !result1;
    });
  };
};